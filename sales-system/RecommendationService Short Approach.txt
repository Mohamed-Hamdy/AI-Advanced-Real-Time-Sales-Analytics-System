package com.salesanalytics.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.salesanalytics.dto.Analytics;
import com.salesanalytics.dto.Recommendation;
import com.salesanalytics.dto.TopProduct;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;

@Service
public class RecommendationService {

    private final OrderService orderService;
    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;
    private final Random random;
    private final boolean aiEnabled;
    private final String apiKey;
    private final String apiUrl;
    private final String modelName;

    @Autowired
    public RecommendationService(
            OrderService orderService,
            RestTemplate restTemplate,
            @Value("${ai.recommendations.enabled:true}") boolean aiEnabled,
            @Value("${deepseek.api.key}") String apiKey,
            @Value("${deepseek.api.url:https://api.deepseek.com/v1/chat/completions}") String apiUrl,
            @Value("${deepseek.model:deepseek-chat}") String modelName) {
        this.orderService = orderService;
        this.restTemplate = restTemplate;
        this.objectMapper = new ObjectMapper();
        this.random = new Random();
        this.aiEnabled = aiEnabled;
        this.apiKey = apiKey;
        this.apiUrl = apiUrl;
        this.modelName = modelName;
    }

    public List<Recommendation> getRecommendations() {
        Analytics analytics = orderService.getAnalytics();
        
        if (aiEnabled) {
            try {
                return getDeepSeekRecommendations(analytics);
            } catch (Exception e) {
                // Fallback to business rules if AI fails
                return generateFallbackRecommendations(analytics);
            }
        } else {
            return generateFallbackRecommendations(analytics);
        }
    }

    private List<Recommendation> getDeepSeekRecommendations(Analytics analytics) {
        String prompt = createPromptFromAnalytics(analytics);
        String aiResponse = getDeepSeekResponse(prompt);
        return parseRecommendations(aiResponse);
    }

    private String createPromptFromAnalytics(Analytics analytics) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("As an e-commerce sales analytics AI, generate 3 data-driven product recommendations in JSON format ")
              .append("with these exact fields: id, title, description, category, priority, expectedOutcome. ")
              .append("Here is the sales data:\n")
              .append(String.format("- Current revenue: $%.2f\n", analytics.getTotalRevenue()))
              .append(String.format("- Revenue change: %.1f%%\n", analytics.getRevenueChange()))
              .append("- Top products:\n");

        for (TopProduct product : analytics.getTopProducts()) {
            prompt.append(String.format("  - %s: %.1f%% of revenue\n", product.getName(), product.getPercentage()));
        }

        prompt.append("\nRespond ONLY with valid JSON array containing recommendation objects.");
        return prompt.toString();
    }

    private String getDeepSeekResponse(String prompt) {
        if (!aiEnabled) {
            throw new IllegalStateException("AI service is disabled");
        }

        // Prepare request headers
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + apiKey);

        // Prepare request body
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", modelName);
        requestBody.put("messages", List.of(
            Map.of("role", "user", "content", prompt)
        ));
        requestBody.put("temperature", 0.7);
        requestBody.put("max_tokens", 1000);

        // Make the API call
        HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);
        ResponseEntity<String> response = restTemplate.postForEntity(apiUrl, request, String.class);

        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("DeepSeek API request failed: " + response.getStatusCode());
        }

        return response.getBody();
    }

    @SuppressWarnings("unchecked")
    private List<Recommendation> parseRecommendations(String jsonResponse) {
        try {
            // First extract the content from DeepSeek's response structure
            Map<String, Object> responseMap = objectMapper.readValue(jsonResponse, 
                new TypeReference<Map<String, Object>>() {});
            
            List<Map<String, Object>> choices = (List<Map<String, Object>>) responseMap.get("choices");
            Map<String, Object> message = (Map<String, Object>) choices.get(0).get("message");
            String content = (String) message.get("content");
            
            // Then parse the actual recommendations
            return objectMapper.readValue(content, new TypeReference<List<Recommendation>>() {});
        } catch (Exception e) {
            System.err.println("Failed to parse DeepSeek response: " + e.getMessage());
            
            // Fallback: return the raw response as a recommendation
            List<Recommendation> fallback = new ArrayList<>();
            fallback.add(new Recommendation(
                "deepseek-fallback",
                "AI Analysis",
                jsonResponse,
                "ai",
                "high",
                "Enhanced decision making"
            ));
            return fallback;
        }
    }

    private List<Recommendation> generateFallbackRecommendations(Analytics analytics) {
        // Implement your existing business rule recommendations here
        List<Recommendation> recommendations = new ArrayList<>();
        
        // Add your product-based recommendations
        if (!analytics.getTopProducts().isEmpty()) {
            TopProduct topProduct = analytics.getTopProducts().get(0);
            recommendations.add(new Recommendation(
                "1",
                "Promote " + topProduct.getName(),
                topProduct.getName() + " is performing well with " + 
                String.format("%.1f", topProduct.getPercentage()) + "% of revenue",
                "promotion",
                "high",
                "Increase sales of top product"
            ));
        }
        
        // Add revenue-based recommendations
        if (analytics.getRevenueChange() < 0) {
            recommendations.add(new Recommendation(
                "2",
                "Revenue Recovery",
                "Revenue decreased by " + String.format("%.1f", Math.abs(analytics.getRevenueChange())) + "%",
                "strategy",
                "high",
                "Stabilize revenue"
            ));
        }
        
        return recommendations;
    }
}